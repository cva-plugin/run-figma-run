/**

    Represents the statistics generated by a test suite.
    @typedef {Object} Stats
    @property {number} suites - The total number of test suites.
    @property {number} tests - The total number of tests executed.
    @property {number} passes - The number of tests that passed.
    @property {number} pending - The number of tests that are pending.
    @property {number} failures - The number of tests that failed.
    @property {Date} start - The start date and time of the test suite execution.
    @property {Date} end - The end date and time of the test suite execution.
    @property {number} duration - The duration of the test suite execution in milliseconds.
    @property {number} testsRegistered - The total number of tests registered.
    @property {number} passPercent - The percentage of tests that passed.
    @property {number} pendingPercent - The percentage of tests that are pending.
    @property {number} other - A miscellaneous count related to test outcomes.
    @property {boolean} hasOther - Indicates if there are outcomes other than pass, fail, or pending.
    @property {number} skipped - The number of skipped tests.
    @property {boolean} hasSkipped - Indicates if there are any skipped tests.
*/
declare type Stats = {
  suites: number;
  tests: number;
  passes: number;
  pending: number;
  failures: number;
  start: Date;
  end: Date;
  duration: number;
  testsRegistered: number;
  passPercent: number;
  pendingPercent: number;
  other: number;
  hasOther: boolean;
  skipped: number;
  hasSkipped: boolean;
};

declare type Hook = {
  fail: boolean;
  context: boolean;
};

declare type Test = {
  pass: boolean;
  fail: boolean;
  pending: boolean;
  skipped: boolean;
};

declare type Suite = {
  suites: Suite[];
  beforeHooks: Hook[];
  afterHooks: Hook[];
  tests: Test[];
};


type Result = {
    title: string;
    suites: Suite[];
    tests: Test[];
    pending: string[]; // test's uuid 
    root: boolean;
    _timeout: number;
    file: string;
    uuid: string;
    beforeHooks: any[]; // Not specified in the provided JSON
    afterHooks: any[]; // Not specified in the provided JSON
    fullFile: string;
    passes: any[]; // test's uuid 
    failures: string[];
    skipped: any[]; // test's uuid 
    duration: number;
    rootEmpty: boolean;
};



// declare class ReportStore implements IObservableObject {
//   filters: ['showPassed', 'showFailed', 'showPending', 'showSkipped'];
//   initialLoadTimeout: number;
//   initialFilterState: Record<string, boolean | null>;
//   reportTitle: string;
//   results: Suite[];
//   showHooksOptions: string[];
//   stats: Stats;
//   VERSION: string;

//   filteredSuites: Suite[];
//   isLoading: boolean;
//   showFailed: boolean;
//   showHooks: string;
//   showPassed: boolean;
//   showPending: boolean;
//   showSkipped: boolean;
//   singleFilter: string | null;
//   sideNavOpen: boolean;

//   constructor(data?: { results?: Suite[]; stats?: Record<string, any> });

//   initialize(): void;

//   openSideNav(): void;

//   closeSideNav(): void;

//   toggleFilter(prop: keyof ReportStore): void;

//   toggleSingleFilter(prop: keyof ReportStore): void;

//   setShowHooks(prop: string): void;

//   toggleIsLoading(isLoading?: boolean): void;

//   updateFilteredSuites(timeout?: number): void;

//   private _mapHook(hook: Hook): Hook | false;

//   private _mapTest(test: Test): boolean;

//   private _mapSuite(suite: Suite): Suite | null;

//   private _reduceItem<T>(acc: T[], item: T | null): T[];

//   private _getFilteredTests(suite: Suite[]): Suite[];

//   private _isValidOption(
//     property: string,
//     options: string[],
//     selection: string
//   ): boolean;

//   private _isValidShowHookOption(option: string): boolean;

//   private _getShowHooks(): string;

//   private _restoreInitialFilterState(): void;
// }

// export default ReportStore;
