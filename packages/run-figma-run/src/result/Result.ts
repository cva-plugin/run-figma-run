import { Suite } from '../Suite';
import { FailureType } from '../types';

export enum TestStatus {
  PASSED,
  FAILED,
  SKIPPED,
  PENDING,
}

/**
 * Represents the statistics generated by a test suite.
 */
export type SuiteStats = {
  /** The total number of test suites. */
  suites: number;
  /** The total number of tests executed. */
  tests: number;
  /** The total number of tests registered. */
  testsRegistered: number;
  /** The number of tests that passed. */
  passes: number;
  /** The number of tests that are pending. */
  pending: number;
  /** The number of tests that failed. */
  failures: number;
  /** The number of skipped tests. */
  skipped: number;
  /** The percentage of tests that passed. */
  passPercent: number;
  /** The percentage of tests that are pending. */
  pendingPercent: number;
  /** The start date and time of the test suite execution. Will be null if not yet run. */
  start: Date | null;
  /** The end date and time of the test suite execution. Will be null if not yet run. */
  end: Date | null;
  /** The duration of the test suite execution in milliseconds. */
  duration: number;
};

export type TestResult = {
  name: string;
  status: TestStatus;
  scope: Suite;
  failure?: {
    type: FailureType;
    message: string;
    expected?: unknown;
    actual?: unknown;
  };
  duration?: number;
};

export type SuiteResult = {
  suiteResults: SuiteResult[];
  testResults: TestResult[];
  stats: SuiteStats;
};

/**
 * createSuiteResult returns an object that represents the results BEFORE any test was ran. *
 */
export function createEmptySuiteResult(suite: Suite): SuiteResult {
  return {
    suiteResults: [],
    testResults: [],
    stats: {
      suites: suite.suites.length,
      tests: suite.tests.length,
      passes: 0,
      pending: suite.children.length,
      failures: 0,
      start: null,
      end: null,
      duration: 0,
      testsRegistered: 0,
      passPercent: 0,
      pendingPercent: 0,
      other: 0,
      hasOther: false,
      skipped: 0,
      hasSkipped: false,
    },
  };
}
